"""
===============================================================================
ENGR 13300 Fall 2023

Program Description
    This part of the program strength checks the password that was either generated by this program or the user's password when they input it. It will simply show a warning to the user that the password is not strong enough, and that they should consider changing it later on. This program also includes error checking for the field.

Assignment Information
    Assignment:     Individual Project
    Author:         Danwanth Jeyakumar, djeyakum@purdue.edu
    Team ID:        LC3 - 19

Contributor:    Name, login@purdue [repeat for each]
    My contributor(s) helped me:
    [ ] understand the assignment expectations without
        telling me how they will approach it.
    [ ] understand different ways to think about a solution
        without helping me plan my solution.
    [ ] think through the meaning of a specific error or
        bug present in my code without looking at my code.
    Note that if you helped somebody else with their code, you
    have to list that person as a contributor here as well.
    
ACADEMIC INTEGRITY STATEMENT
I have not used source code obtained from any other unauthorized
source, either modified or unmodified. Neither have I provided
access to my code to another. The project I am submitting
is my own original work.
===============================================================================
"""

# Error checking for the field for strength checker
def strengthErrorCheck(password):
    if password == "": # Check if the field is empty
        print("Error")
        return "Error"
    elif len(password) < 11: # Check the length of the password 
        print("Password not long enough")
        return "Password not long enough"
    else:
        print("Success")
        return "Success"

# Check the strength of the password
def strengthCheck(pwd):
    # CONDITIONS
    # Number of characters: Minimum 11 (Condition)
    # Includes Uppercase and Lowercase Letters (Condition)
    # Includes Numbers (Condition)
    # Includes Symbols (Condition)

    # Check the length of the password before executing the function that calculates the point value for strength of the password
    strengthValues = []
    strengthValues = calculateStrengthValue(pwd)
    
    # Assign a value to the strength of the password depending on the total point value it earned
    # Above or equal to 100: Very Strong
    # Above or equal to 75: Strong
    # Above or equal to 50: Weak
    # Below 50: Poor
    strength = "Poor"
    if strengthValues[0] >= 150:
        strength = "Very Strong"
    elif strengthValues[0] >= 100:
        strength = "Strong"
    elif strengthValues[0] >= 75:
        strength = "Weak"
    else:
        strength = "Poor"

    return strength

# Calculate the number of points the password is awarded
def calculateStrengthValue(pwd):
    # Password Strength Dependencies (Points System)
    # ADDITIONS
    # Number of characters: Minimum 11 (Condition)
    # Includes Uppercase and Lowercase Letters (Condition)
    # Includes Numbers (Condition)
    # Includes Symbols (Condition)
    # Symbols or Numbers in the Middle of the Password (Not Condition)
    # 
    # DEDUCTIONS
    # Letters Only
    # Numbers Only

    # Calculate the number of points that the password recieves to determine the strength later on
    characterPts = len(pwd) * 2 # length of the password times 2
    uppercasePts = (len(pwd) - sum(1 for u in pwd if u.isupper())) * 2 # quantity of length of password minus the uppercase letters times 2
    lowercasePts = (len(pwd) - sum(1 for l in pwd if l.islower())) * 2 # quantity of length of password minus the lowercase letters times 2
    numbersPts = sum(1 for n in pwd if n.isdigit()) * 4 # numbers times 4
    specialPts =  (len(pwd) - sum(1 for n in pwd if n.isdigit()) - sum(1 for a in pwd if a.isalpha()) - sum(1 for s in pwd if s.isspace())) * 6 # special characters is the number of letters, numbers, and spaces subtracted from the length of the password; special characters times 6
    # Check if there are any numbers or special characters inside the password but not at the ends
    countSpecial = 0
    for i in pwd:
        if i.isdigit() or isspecial(i):
            if pwd.index(i) != 0  or pwd.index(i) != (len(pwd) - 1):
                countSpecial+=1
    specialInMiddlePts = countSpecial * 2 # number of special characters or numbers in the middle times 2
    # Calculate the total points without deductions
    totalAdditions = characterPts + uppercasePts + lowercasePts + numbersPts + specialPts + specialInMiddlePts

    # Calculate the number of points that need to be deducted because these things make the password weaker
    # Calculate the deductions for having only letters or numbers in the password
    deductions = 0
    if len(pwd) == sum(1 for n in pwd if n.isdigit()):
        deductions = -len(pwd)
    elif len(pwd) == sum(1 for l in pwd if l.isalpha()):
        deductions = -len(pwd)

    # Calculate total number of points awarded to the password
    totalPoints = totalAdditions + deductions

    strengthValues = [totalPoints, uppercasePts, lowercasePts, numbersPts, specialPts]
    # Return the strength values that will be used to check if the password is compliant with the conditions
    return strengthValues

def isspecial(string):
        if string.isalpha() or string.isdigit() or string.isspace():
            return False
        else:
            return True